#include<iostream>
#include<pthread.h>
#include<unistd.h>
#include<stdlib.h>
#include<fcntl.h>
#include<string.h>

using namespace std;

pthread_mutex_t mutex;

class Singleton//懒汉模式
{
public:
	static Singleton* getInstance()
	{
		if(instance == NULL){
			pthread_mutex_lock(&mutex);
			if(instance == NULL){
				instance = new Singleton;
			}
		}
		return instance;
	}
	static void mvInstance(Singleton* p)
	{
		if(instance == NULL){
			p = NULL;return;
		}else{
			delete instance;
			p = NULL;
			instance = NULL;
			pthread_mutex_unlock(&mutex);
		}
	}
	int writeInfo(char* ch)
	{
		return write(fd, ch, strlen(ch));
	}
private:
	static Singleton* instance;//创建实例;
	int fd;
	Singleton()
	{
		fd = open("./log.txt",O_CREAT | O_RDWR | O_APPEND, 0666);
		cout << "create " << endl;
	}
	~Singleton()
	{
		close(fd);
		cout << "delete " << endl;
	}
};
Singleton* Singleton::instance = NULL;//初始化实例
void* pthread_fun(void* arg)
{
	int i = 20;
	while(i--){
		Singleton* ref = Singleton::getInstance();
		cout << pthread_self() << " write " << ref->writeInfo((char*)"thread- ") << "->log.txt" << endl;
		sleep(1);
		Singleton::mvInstance(ref);
	}
	return NULL;
}

int main(void)
{
	pthread_mutex_init(&mutex, NULL);
	int err;
	pthread_t th1,th2;
	if((err = pthread_create(&th1, NULL, pthread_fun, NULL)) < 0){
		perror("create error");
		exit(1);
	}
	if((err = pthread_create(&th2, NULL, pthread_fun, NULL)) < 0){
		perror("create error");
		exit(1);
	}
	int i = 20;
	while(i--){
		Singleton* ref = Singleton::getInstance();
		cout << "main write " << ref->writeInfo((char*)"main= ") << "->log.txt" << endl;
		sleep(1);
		Singleton::mvInstance(ref);
	}
	pthread_join(th1, NULL);
	pthread_join(th2, NULL);
	pthread_mutex_destroy(&mutex);
	return 0;
}
